'''
Created on Oct 30, 2017

@author: matti
'''

import bclab
import logging
import time


class TestProducer(bclab.Producer):
    def __init__(self, logger, broker_address, broker_port, client_id):
        super(TestProducer, self).__init__(logger, broker_address, broker_port, client_id)
        self.total_rows_sent = 0
        self.is_running = True
    
    
    def on_arm(self, attr):
        ch0 = bclab.DataChannel("c0", 0, -1, 1, "emg")
        ch1 = bclab.DataChannel("c0", 1, -1, 1, "emg")
        self.initialize_data(1000, 2, [ch0, ch1])

    def produce(self):
        status = self.get_status()

        if status in [bclab.STATUS_ARMED, bclab.STATUS_TRIGGERED]:
            s = ""
            self.stream_data(s, self.total_rows_sent, 1000)
            self.total_rows_sent += 1000
            print("o", end=' ')
        else:
            print(".", end=' ')

if __name__ == '__main__':
    logging.getLogger().setLevel(logging.INFO)
    logging.info('running')
    producer= TestProducer(logging, 'localhost', 1883, "test_producer" )
    loop_iter = 0
    while True:
        producer.produce()
        if producer.get_status() in [bclab.STATUS_ARMED, bclab.STATUS_TRIGGERED] and not loop_iter % 10:
            producer.post_analysis('test_producer/analysis', count=loop_iter)
        time.sleep(0.5)
        loop_iter += 1
